{
  "version": 3,
  "sources": ["../../@huggingface/inference/dist/index.js"],
  "sourcesContent": ["var __defProp = Object.defineProperty;\r\nvar __export = (target, all) => {\r\n  for (var name in all)\r\n    __defProp(target, name, { get: all[name], enumerable: true });\r\n};\r\n\r\n// src/tasks/index.ts\r\nvar tasks_exports = {};\r\n__export(tasks_exports, {\r\n  audioClassification: () => audioClassification,\r\n  audioToAudio: () => audioToAudio,\r\n  automaticSpeechRecognition: () => automaticSpeechRecognition,\r\n  chatCompletion: () => chatCompletion,\r\n  chatCompletionStream: () => chatCompletionStream,\r\n  documentQuestionAnswering: () => documentQuestionAnswering,\r\n  featureExtraction: () => featureExtraction,\r\n  fillMask: () => fillMask,\r\n  imageClassification: () => imageClassification,\r\n  imageSegmentation: () => imageSegmentation,\r\n  imageToImage: () => imageToImage,\r\n  imageToText: () => imageToText,\r\n  objectDetection: () => objectDetection,\r\n  questionAnswering: () => questionAnswering,\r\n  request: () => request,\r\n  sentenceSimilarity: () => sentenceSimilarity,\r\n  streamingRequest: () => streamingRequest,\r\n  summarization: () => summarization,\r\n  tableQuestionAnswering: () => tableQuestionAnswering,\r\n  tabularClassification: () => tabularClassification,\r\n  tabularRegression: () => tabularRegression,\r\n  textClassification: () => textClassification,\r\n  textGeneration: () => textGeneration,\r\n  textGenerationStream: () => textGenerationStream,\r\n  textToImage: () => textToImage,\r\n  textToSpeech: () => textToSpeech,\r\n  tokenClassification: () => tokenClassification,\r\n  translation: () => translation,\r\n  visualQuestionAnswering: () => visualQuestionAnswering,\r\n  zeroShotClassification: () => zeroShotClassification,\r\n  zeroShotImageClassification: () => zeroShotImageClassification\r\n});\r\n\r\n// src/utils/pick.ts\r\nfunction pick(o, props) {\r\n  return Object.assign(\r\n    {},\r\n    ...props.map((prop) => {\r\n      if (o[prop] !== void 0) {\r\n        return { [prop]: o[prop] };\r\n      }\r\n    })\r\n  );\r\n}\r\n\r\n// src/utils/typedInclude.ts\r\nfunction typedInclude(arr, v) {\r\n  return arr.includes(v);\r\n}\r\n\r\n// src/utils/omit.ts\r\nfunction omit(o, props) {\r\n  const propsArr = Array.isArray(props) ? props : [props];\r\n  const letsKeep = Object.keys(o).filter((prop) => !typedInclude(propsArr, prop));\r\n  return pick(o, letsKeep);\r\n}\r\n\r\n// src/lib/isUrl.ts\r\nfunction isUrl(modelOrUrl) {\r\n  return /^http(s?):/.test(modelOrUrl) || modelOrUrl.startsWith(\"/\");\r\n}\r\n\r\n// src/lib/getDefaultTask.ts\r\nvar taskCache = /* @__PURE__ */ new Map();\r\nvar CACHE_DURATION = 10 * 60 * 1e3;\r\nvar MAX_CACHE_ITEMS = 1e3;\r\nvar HF_HUB_URL = \"https://huggingface.co\";\r\nasync function getDefaultTask(model, accessToken, options) {\r\n  if (isUrl(model)) {\r\n    return null;\r\n  }\r\n  const key = `${model}:${accessToken}`;\r\n  let cachedTask = taskCache.get(key);\r\n  if (cachedTask && cachedTask.date < new Date(Date.now() - CACHE_DURATION)) {\r\n    taskCache.delete(key);\r\n    cachedTask = void 0;\r\n  }\r\n  if (cachedTask === void 0) {\r\n    const modelTask = await (options?.fetch ?? fetch)(`${HF_HUB_URL}/api/models/${model}?expand[]=pipeline_tag`, {\r\n      headers: accessToken ? { Authorization: `Bearer ${accessToken}` } : {}\r\n    }).then((resp) => resp.json()).then((json) => json.pipeline_tag).catch(() => null);\r\n    if (!modelTask) {\r\n      return null;\r\n    }\r\n    cachedTask = { task: modelTask, date: /* @__PURE__ */ new Date() };\r\n    taskCache.set(key, { task: modelTask, date: /* @__PURE__ */ new Date() });\r\n    if (taskCache.size > MAX_CACHE_ITEMS) {\r\n      taskCache.delete(taskCache.keys().next().value);\r\n    }\r\n  }\r\n  return cachedTask.task;\r\n}\r\n\r\n// src/lib/makeRequestOptions.ts\r\nvar HF_INFERENCE_API_BASE_URL = \"https://api-inference.huggingface.co\";\r\nvar tasks = null;\r\nasync function makeRequestOptions(args, options) {\r\n  const { accessToken, endpointUrl, ...otherArgs } = args;\r\n  let { model } = args;\r\n  const {\r\n    forceTask: task,\r\n    includeCredentials,\r\n    taskHint,\r\n    wait_for_model,\r\n    use_cache,\r\n    dont_load_model,\r\n    chatCompletion: chatCompletion2\r\n  } = options ?? {};\r\n  const headers = {};\r\n  if (accessToken) {\r\n    headers[\"Authorization\"] = `Bearer ${accessToken}`;\r\n  }\r\n  if (!model && !tasks && taskHint) {\r\n    const res = await fetch(`${HF_HUB_URL}/api/tasks`);\r\n    if (res.ok) {\r\n      tasks = await res.json();\r\n    }\r\n  }\r\n  if (!model && tasks && taskHint) {\r\n    const taskInfo = tasks[taskHint];\r\n    if (taskInfo) {\r\n      model = taskInfo.models[0].id;\r\n    }\r\n  }\r\n  if (!model) {\r\n    throw new Error(\"No model provided, and no default model found for this task\");\r\n  }\r\n  const binary = \"data\" in args && !!args.data;\r\n  if (!binary) {\r\n    headers[\"Content-Type\"] = \"application/json\";\r\n  }\r\n  if (wait_for_model) {\r\n    headers[\"X-Wait-For-Model\"] = \"true\";\r\n  }\r\n  if (use_cache === false) {\r\n    headers[\"X-Use-Cache\"] = \"false\";\r\n  }\r\n  if (dont_load_model) {\r\n    headers[\"X-Load-Model\"] = \"0\";\r\n  }\r\n  let url = (() => {\r\n    if (endpointUrl && isUrl(model)) {\r\n      throw new TypeError(\"Both model and endpointUrl cannot be URLs\");\r\n    }\r\n    if (isUrl(model)) {\r\n      console.warn(\"Using a model URL is deprecated, please use the `endpointUrl` parameter instead\");\r\n      return model;\r\n    }\r\n    if (endpointUrl) {\r\n      return endpointUrl;\r\n    }\r\n    if (task) {\r\n      return `${HF_INFERENCE_API_BASE_URL}/pipeline/${task}/${model}`;\r\n    }\r\n    return `${HF_INFERENCE_API_BASE_URL}/models/${model}`;\r\n  })();\r\n  if (chatCompletion2 && !url.endsWith(\"/chat/completions\")) {\r\n    url += \"/v1/chat/completions\";\r\n  }\r\n  let credentials;\r\n  if (typeof includeCredentials === \"string\") {\r\n    credentials = includeCredentials;\r\n  } else if (includeCredentials === true) {\r\n    credentials = \"include\";\r\n  }\r\n  const info = {\r\n    headers,\r\n    method: \"POST\",\r\n    body: binary ? args.data : JSON.stringify({\r\n      ...otherArgs.model && isUrl(otherArgs.model) ? omit(otherArgs, \"model\") : otherArgs\r\n    }),\r\n    ...credentials && { credentials },\r\n    signal: options?.signal\r\n  };\r\n  return { url, info };\r\n}\r\n\r\n// src/tasks/custom/request.ts\r\nasync function request(args, options) {\r\n  const { url, info } = await makeRequestOptions(args, options);\r\n  const response = await (options?.fetch ?? fetch)(url, info);\r\n  if (options?.retry_on_error !== false && response.status === 503 && !options?.wait_for_model) {\r\n    return request(args, {\r\n      ...options,\r\n      wait_for_model: true\r\n    });\r\n  }\r\n  if (!response.ok) {\r\n    if (response.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\r\n      const output = await response.json();\r\n      if ([400, 422, 404, 500].includes(response.status) && options?.chatCompletion) {\r\n        throw new Error(`Server ${args.model} does not seem to support chat completion. Error: ${output.error}`);\r\n      }\r\n      if (output.error) {\r\n        throw new Error(JSON.stringify(output.error));\r\n      }\r\n    }\r\n    throw new Error(\"An error occurred while fetching the blob\");\r\n  }\r\n  if (response.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\r\n    return await response.json();\r\n  }\r\n  return await response.blob();\r\n}\r\n\r\n// src/vendor/fetch-event-source/parse.ts\r\nfunction getLines(onLine) {\r\n  let buffer;\r\n  let position;\r\n  let fieldLength;\r\n  let discardTrailingNewline = false;\r\n  return function onChunk(arr) {\r\n    if (buffer === void 0) {\r\n      buffer = arr;\r\n      position = 0;\r\n      fieldLength = -1;\r\n    } else {\r\n      buffer = concat(buffer, arr);\r\n    }\r\n    const bufLength = buffer.length;\r\n    let lineStart = 0;\r\n    while (position < bufLength) {\r\n      if (discardTrailingNewline) {\r\n        if (buffer[position] === 10 /* NewLine */) {\r\n          lineStart = ++position;\r\n        }\r\n        discardTrailingNewline = false;\r\n      }\r\n      let lineEnd = -1;\r\n      for (; position < bufLength && lineEnd === -1; ++position) {\r\n        switch (buffer[position]) {\r\n          case 58 /* Colon */:\r\n            if (fieldLength === -1) {\r\n              fieldLength = position - lineStart;\r\n            }\r\n            break;\r\n          case 13 /* CarriageReturn */:\r\n            discardTrailingNewline = true;\r\n          case 10 /* NewLine */:\r\n            lineEnd = position;\r\n            break;\r\n        }\r\n      }\r\n      if (lineEnd === -1) {\r\n        break;\r\n      }\r\n      onLine(buffer.subarray(lineStart, lineEnd), fieldLength);\r\n      lineStart = position;\r\n      fieldLength = -1;\r\n    }\r\n    if (lineStart === bufLength) {\r\n      buffer = void 0;\r\n    } else if (lineStart !== 0) {\r\n      buffer = buffer.subarray(lineStart);\r\n      position -= lineStart;\r\n    }\r\n  };\r\n}\r\nfunction getMessages(onId, onRetry, onMessage) {\r\n  let message = newMessage();\r\n  const decoder = new TextDecoder();\r\n  return function onLine(line, fieldLength) {\r\n    if (line.length === 0) {\r\n      onMessage?.(message);\r\n      message = newMessage();\r\n    } else if (fieldLength > 0) {\r\n      const field = decoder.decode(line.subarray(0, fieldLength));\r\n      const valueOffset = fieldLength + (line[fieldLength + 1] === 32 /* Space */ ? 2 : 1);\r\n      const value = decoder.decode(line.subarray(valueOffset));\r\n      switch (field) {\r\n        case \"data\":\r\n          message.data = message.data ? message.data + \"\\n\" + value : value;\r\n          break;\r\n        case \"event\":\r\n          message.event = value;\r\n          break;\r\n        case \"id\":\r\n          onId(message.id = value);\r\n          break;\r\n        case \"retry\":\r\n          const retry = parseInt(value, 10);\r\n          if (!isNaN(retry)) {\r\n            onRetry(message.retry = retry);\r\n          }\r\n          break;\r\n      }\r\n    }\r\n  };\r\n}\r\nfunction concat(a, b) {\r\n  const res = new Uint8Array(a.length + b.length);\r\n  res.set(a);\r\n  res.set(b, a.length);\r\n  return res;\r\n}\r\nfunction newMessage() {\r\n  return {\r\n    data: \"\",\r\n    event: \"\",\r\n    id: \"\",\r\n    retry: void 0\r\n  };\r\n}\r\n\r\n// src/tasks/custom/streamingRequest.ts\r\nasync function* streamingRequest(args, options) {\r\n  const { url, info } = await makeRequestOptions({ ...args, stream: true }, options);\r\n  const response = await (options?.fetch ?? fetch)(url, info);\r\n  if (options?.retry_on_error !== false && response.status === 503 && !options?.wait_for_model) {\r\n    return yield* streamingRequest(args, {\r\n      ...options,\r\n      wait_for_model: true\r\n    });\r\n  }\r\n  if (!response.ok) {\r\n    if (response.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\r\n      const output = await response.json();\r\n      if ([400, 422, 404, 500].includes(response.status) && options?.chatCompletion) {\r\n        throw new Error(`Server ${args.model} does not seem to support chat completion. Error: ${output.error}`);\r\n      }\r\n      if (output.error) {\r\n        throw new Error(output.error);\r\n      }\r\n    }\r\n    throw new Error(`Server response contains error: ${response.status}`);\r\n  }\r\n  if (!response.headers.get(\"content-type\")?.startsWith(\"text/event-stream\")) {\r\n    throw new Error(\r\n      `Server does not support event stream content type, it returned ` + response.headers.get(\"content-type\")\r\n    );\r\n  }\r\n  if (!response.body) {\r\n    return;\r\n  }\r\n  const reader = response.body.getReader();\r\n  let events = [];\r\n  const onEvent = (event) => {\r\n    events.push(event);\r\n  };\r\n  const onChunk = getLines(\r\n    getMessages(\r\n      () => {\r\n      },\r\n      () => {\r\n      },\r\n      onEvent\r\n    )\r\n  );\r\n  try {\r\n    while (true) {\r\n      const { done, value } = await reader.read();\r\n      if (done)\r\n        return;\r\n      onChunk(value);\r\n      for (const event of events) {\r\n        if (event.data.length > 0) {\r\n          if (event.data === \"[DONE]\") {\r\n            return;\r\n          }\r\n          const data = JSON.parse(event.data);\r\n          if (typeof data === \"object\" && data !== null && \"error\" in data) {\r\n            throw new Error(data.error);\r\n          }\r\n          yield data;\r\n        }\r\n      }\r\n      events = [];\r\n    }\r\n  } finally {\r\n    reader.releaseLock();\r\n  }\r\n}\r\n\r\n// src/lib/InferenceOutputError.ts\r\nvar InferenceOutputError = class extends TypeError {\r\n  constructor(message) {\r\n    super(\r\n      `Invalid inference output: ${message}. Use the 'request' method with the same parameters to do a custom call with no type checking.`\r\n    );\r\n    this.name = \"InferenceOutputError\";\r\n  }\r\n};\r\n\r\n// src/tasks/audio/audioClassification.ts\r\nasync function audioClassification(args, options) {\r\n  const res = await request(args, {\r\n    ...options,\r\n    taskHint: \"audio-classification\"\r\n  });\r\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x.label === \"string\" && typeof x.score === \"number\");\r\n  if (!isValidOutput) {\r\n    throw new InferenceOutputError(\"Expected Array<{label: string, score: number}>\");\r\n  }\r\n  return res;\r\n}\r\n\r\n// src/tasks/audio/automaticSpeechRecognition.ts\r\nasync function automaticSpeechRecognition(args, options) {\r\n  const res = await request(args, {\r\n    ...options,\r\n    taskHint: \"automatic-speech-recognition\"\r\n  });\r\n  const isValidOutput = typeof res?.text === \"string\";\r\n  if (!isValidOutput) {\r\n    throw new InferenceOutputError(\"Expected {text: string}\");\r\n  }\r\n  return res;\r\n}\r\n\r\n// src/tasks/audio/textToSpeech.ts\r\nasync function textToSpeech(args, options) {\r\n  const res = await request(args, {\r\n    ...options,\r\n    taskHint: \"text-to-speech\"\r\n  });\r\n  const isValidOutput = res && res instanceof Blob;\r\n  if (!isValidOutput) {\r\n    throw new InferenceOutputError(\"Expected Blob\");\r\n  }\r\n  return res;\r\n}\r\n\r\n// src/tasks/audio/audioToAudio.ts\r\nasync function audioToAudio(args, options) {\r\n  const res = await request(args, {\r\n    ...options,\r\n    taskHint: \"audio-to-audio\"\r\n  });\r\n  const isValidOutput = Array.isArray(res) && res.every(\r\n    (x) => typeof x.label === \"string\" && typeof x.blob === \"string\" && typeof x[\"content-type\"] === \"string\"\r\n  );\r\n  if (!isValidOutput) {\r\n    throw new InferenceOutputError(\"Expected Array<{label: string, blob: string, content-type: string}>\");\r\n  }\r\n  return res;\r\n}\r\n\r\n// src/tasks/cv/imageClassification.ts\r\nasync function imageClassification(args, options) {\r\n  const res = await request(args, {\r\n    ...options,\r\n    taskHint: \"image-classification\"\r\n  });\r\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x.label === \"string\" && typeof x.score === \"number\");\r\n  if (!isValidOutput) {\r\n    throw new InferenceOutputError(\"Expected Array<{label: string, score: number}>\");\r\n  }\r\n  return res;\r\n}\r\n\r\n// src/tasks/cv/imageSegmentation.ts\r\nasync function imageSegmentation(args, options) {\r\n  const res = await request(args, {\r\n    ...options,\r\n    taskHint: \"image-segmentation\"\r\n  });\r\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x.label === \"string\" && typeof x.mask === \"string\" && typeof x.score === \"number\");\r\n  if (!isValidOutput) {\r\n    throw new InferenceOutputError(\"Expected Array<{label: string, mask: string, score: number}>\");\r\n  }\r\n  return res;\r\n}\r\n\r\n// src/tasks/cv/imageToText.ts\r\nasync function imageToText(args, options) {\r\n  const res = (await request(args, {\r\n    ...options,\r\n    taskHint: \"image-to-text\"\r\n  }))?.[0];\r\n  if (typeof res?.generated_text !== \"string\") {\r\n    throw new InferenceOutputError(\"Expected {generated_text: string}\");\r\n  }\r\n  return res;\r\n}\r\n\r\n// src/tasks/cv/objectDetection.ts\r\nasync function objectDetection(args, options) {\r\n  const res = await request(args, {\r\n    ...options,\r\n    taskHint: \"object-detection\"\r\n  });\r\n  const isValidOutput = Array.isArray(res) && res.every(\r\n    (x) => typeof x.label === \"string\" && typeof x.score === \"number\" && typeof x.box.xmin === \"number\" && typeof x.box.ymin === \"number\" && typeof x.box.xmax === \"number\" && typeof x.box.ymax === \"number\"\r\n  );\r\n  if (!isValidOutput) {\r\n    throw new InferenceOutputError(\r\n      \"Expected Array<{label:string; score:number; box:{xmin:number; ymin:number; xmax:number; ymax:number}}>\"\r\n    );\r\n  }\r\n  return res;\r\n}\r\n\r\n// src/tasks/cv/textToImage.ts\r\nasync function textToImage(args, options) {\r\n  const res = await request(args, {\r\n    ...options,\r\n    taskHint: \"text-to-image\"\r\n  });\r\n  const isValidOutput = res && res instanceof Blob;\r\n  if (!isValidOutput) {\r\n    throw new InferenceOutputError(\"Expected Blob\");\r\n  }\r\n  return res;\r\n}\r\n\r\n// src/utils/base64FromBytes.ts\r\nfunction base64FromBytes(arr) {\r\n  if (globalThis.Buffer) {\r\n    return globalThis.Buffer.from(arr).toString(\"base64\");\r\n  } else {\r\n    const bin = [];\r\n    arr.forEach((byte) => {\r\n      bin.push(String.fromCharCode(byte));\r\n    });\r\n    return globalThis.btoa(bin.join(\"\"));\r\n  }\r\n}\r\n\r\n// src/tasks/cv/imageToImage.ts\r\nasync function imageToImage(args, options) {\r\n  let reqArgs;\r\n  if (!args.parameters) {\r\n    reqArgs = {\r\n      accessToken: args.accessToken,\r\n      model: args.model,\r\n      data: args.inputs\r\n    };\r\n  } else {\r\n    reqArgs = {\r\n      ...args,\r\n      inputs: base64FromBytes(\r\n        new Uint8Array(args.inputs instanceof ArrayBuffer ? args.inputs : await args.inputs.arrayBuffer())\r\n      )\r\n    };\r\n  }\r\n  const res = await request(reqArgs, {\r\n    ...options,\r\n    taskHint: \"image-to-image\"\r\n  });\r\n  const isValidOutput = res && res instanceof Blob;\r\n  if (!isValidOutput) {\r\n    throw new InferenceOutputError(\"Expected Blob\");\r\n  }\r\n  return res;\r\n}\r\n\r\n// src/tasks/cv/zeroShotImageClassification.ts\r\nasync function zeroShotImageClassification(args, options) {\r\n  const reqArgs = {\r\n    ...args,\r\n    inputs: {\r\n      image: base64FromBytes(\r\n        new Uint8Array(\r\n          args.inputs.image instanceof ArrayBuffer ? args.inputs.image : await args.inputs.image.arrayBuffer()\r\n        )\r\n      )\r\n    }\r\n  };\r\n  const res = await request(reqArgs, {\r\n    ...options,\r\n    taskHint: \"zero-shot-image-classification\"\r\n  });\r\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x.label === \"string\" && typeof x.score === \"number\");\r\n  if (!isValidOutput) {\r\n    throw new InferenceOutputError(\"Expected Array<{label: string, score: number}>\");\r\n  }\r\n  return res;\r\n}\r\n\r\n// src/tasks/nlp/featureExtraction.ts\r\nasync function featureExtraction(args, options) {\r\n  const defaultTask = args.model ? await getDefaultTask(args.model, args.accessToken, options) : void 0;\r\n  const res = await request(args, {\r\n    ...options,\r\n    taskHint: \"feature-extraction\",\r\n    ...defaultTask === \"sentence-similarity\" && { forceTask: \"feature-extraction\" }\r\n  });\r\n  let isValidOutput = true;\r\n  const isNumArrayRec = (arr, maxDepth, curDepth = 0) => {\r\n    if (curDepth > maxDepth)\r\n      return false;\r\n    if (arr.every((x) => Array.isArray(x))) {\r\n      return arr.every((x) => isNumArrayRec(x, maxDepth, curDepth + 1));\r\n    } else {\r\n      return arr.every((x) => typeof x === \"number\");\r\n    }\r\n  };\r\n  isValidOutput = Array.isArray(res) && isNumArrayRec(res, 3, 0);\r\n  if (!isValidOutput) {\r\n    throw new InferenceOutputError(\"Expected Array<number[][][] | number[][] | number[] | number>\");\r\n  }\r\n  return res;\r\n}\r\n\r\n// src/tasks/nlp/fillMask.ts\r\nasync function fillMask(args, options) {\r\n  const res = await request(args, {\r\n    ...options,\r\n    taskHint: \"fill-mask\"\r\n  });\r\n  const isValidOutput = Array.isArray(res) && res.every(\r\n    (x) => typeof x.score === \"number\" && typeof x.sequence === \"string\" && typeof x.token === \"number\" && typeof x.token_str === \"string\"\r\n  );\r\n  if (!isValidOutput) {\r\n    throw new InferenceOutputError(\r\n      \"Expected Array<{score: number, sequence: string, token: number, token_str: string}>\"\r\n    );\r\n  }\r\n  return res;\r\n}\r\n\r\n// src/tasks/nlp/questionAnswering.ts\r\nasync function questionAnswering(args, options) {\r\n  const res = await request(args, {\r\n    ...options,\r\n    taskHint: \"question-answering\"\r\n  });\r\n  const isValidOutput = typeof res === \"object\" && !!res && typeof res.answer === \"string\" && typeof res.end === \"number\" && typeof res.score === \"number\" && typeof res.start === \"number\";\r\n  if (!isValidOutput) {\r\n    throw new InferenceOutputError(\"Expected {answer: string, end: number, score: number, start: number}\");\r\n  }\r\n  return res;\r\n}\r\n\r\n// src/tasks/nlp/sentenceSimilarity.ts\r\nasync function sentenceSimilarity(args, options) {\r\n  const defaultTask = args.model ? await getDefaultTask(args.model, args.accessToken, options) : void 0;\r\n  const res = await request(args, {\r\n    ...options,\r\n    taskHint: \"sentence-similarity\",\r\n    ...defaultTask === \"feature-extraction\" && { forceTask: \"sentence-similarity\" }\r\n  });\r\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x === \"number\");\r\n  if (!isValidOutput) {\r\n    throw new InferenceOutputError(\"Expected number[]\");\r\n  }\r\n  return res;\r\n}\r\n\r\n// src/tasks/nlp/summarization.ts\r\nasync function summarization(args, options) {\r\n  const res = await request(args, {\r\n    ...options,\r\n    taskHint: \"summarization\"\r\n  });\r\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x?.summary_text === \"string\");\r\n  if (!isValidOutput) {\r\n    throw new InferenceOutputError(\"Expected Array<{summary_text: string}>\");\r\n  }\r\n  return res?.[0];\r\n}\r\n\r\n// src/tasks/nlp/tableQuestionAnswering.ts\r\nasync function tableQuestionAnswering(args, options) {\r\n  const res = await request(args, {\r\n    ...options,\r\n    taskHint: \"table-question-answering\"\r\n  });\r\n  const isValidOutput = typeof res?.aggregator === \"string\" && typeof res.answer === \"string\" && Array.isArray(res.cells) && res.cells.every((x) => typeof x === \"string\") && Array.isArray(res.coordinates) && res.coordinates.every((coord) => Array.isArray(coord) && coord.every((x) => typeof x === \"number\"));\r\n  if (!isValidOutput) {\r\n    throw new InferenceOutputError(\r\n      \"Expected {aggregator: string, answer: string, cells: string[], coordinates: number[][]}\"\r\n    );\r\n  }\r\n  return res;\r\n}\r\n\r\n// src/tasks/nlp/textClassification.ts\r\nasync function textClassification(args, options) {\r\n  const res = (await request(args, {\r\n    ...options,\r\n    taskHint: \"text-classification\"\r\n  }))?.[0];\r\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x?.label === \"string\" && typeof x.score === \"number\");\r\n  if (!isValidOutput) {\r\n    throw new InferenceOutputError(\"Expected Array<{label: string, score: number}>\");\r\n  }\r\n  return res;\r\n}\r\n\r\n// src/utils/toArray.ts\r\nfunction toArray(obj) {\r\n  if (Array.isArray(obj)) {\r\n    return obj;\r\n  }\r\n  return [obj];\r\n}\r\n\r\n// src/tasks/nlp/textGeneration.ts\r\nasync function textGeneration(args, options) {\r\n  const res = toArray(\r\n    await request(args, {\r\n      ...options,\r\n      taskHint: \"text-generation\"\r\n    })\r\n  );\r\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x?.generated_text === \"string\");\r\n  if (!isValidOutput) {\r\n    throw new InferenceOutputError(\"Expected Array<{generated_text: string}>\");\r\n  }\r\n  return res?.[0];\r\n}\r\n\r\n// src/tasks/nlp/textGenerationStream.ts\r\nasync function* textGenerationStream(args, options) {\r\n  yield* streamingRequest(args, {\r\n    ...options,\r\n    taskHint: \"text-generation\"\r\n  });\r\n}\r\n\r\n// src/tasks/nlp/tokenClassification.ts\r\nasync function tokenClassification(args, options) {\r\n  const res = toArray(\r\n    await request(args, {\r\n      ...options,\r\n      taskHint: \"token-classification\"\r\n    })\r\n  );\r\n  const isValidOutput = Array.isArray(res) && res.every(\r\n    (x) => typeof x.end === \"number\" && typeof x.entity_group === \"string\" && typeof x.score === \"number\" && typeof x.start === \"number\" && typeof x.word === \"string\"\r\n  );\r\n  if (!isValidOutput) {\r\n    throw new InferenceOutputError(\r\n      \"Expected Array<{end: number, entity_group: string, score: number, start: number, word: string}>\"\r\n    );\r\n  }\r\n  return res;\r\n}\r\n\r\n// src/tasks/nlp/translation.ts\r\nasync function translation(args, options) {\r\n  const res = await request(args, {\r\n    ...options,\r\n    taskHint: \"translation\"\r\n  });\r\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x?.translation_text === \"string\");\r\n  if (!isValidOutput) {\r\n    throw new InferenceOutputError(\"Expected type Array<{translation_text: string}>\");\r\n  }\r\n  return res?.length === 1 ? res?.[0] : res;\r\n}\r\n\r\n// src/tasks/nlp/zeroShotClassification.ts\r\nasync function zeroShotClassification(args, options) {\r\n  const res = toArray(\r\n    await request(args, {\r\n      ...options,\r\n      taskHint: \"zero-shot-classification\"\r\n    })\r\n  );\r\n  const isValidOutput = Array.isArray(res) && res.every(\r\n    (x) => Array.isArray(x.labels) && x.labels.every((_label) => typeof _label === \"string\") && Array.isArray(x.scores) && x.scores.every((_score) => typeof _score === \"number\") && typeof x.sequence === \"string\"\r\n  );\r\n  if (!isValidOutput) {\r\n    throw new InferenceOutputError(\"Expected Array<{labels: string[], scores: number[], sequence: string}>\");\r\n  }\r\n  return res;\r\n}\r\n\r\n// src/tasks/nlp/chatCompletion.ts\r\nasync function chatCompletion(args, options) {\r\n  const res = await request(args, {\r\n    ...options,\r\n    taskHint: \"text-generation\",\r\n    chatCompletion: true\r\n  });\r\n  const isValidOutput = typeof res === \"object\" && Array.isArray(res?.choices) && typeof res?.created === \"number\" && typeof res?.id === \"string\" && typeof res?.model === \"string\" && typeof res?.system_fingerprint === \"string\" && typeof res?.usage === \"object\";\r\n  if (!isValidOutput) {\r\n    throw new InferenceOutputError(\"Expected ChatCompletionOutput\");\r\n  }\r\n  return res;\r\n}\r\n\r\n// src/tasks/nlp/chatCompletionStream.ts\r\nasync function* chatCompletionStream(args, options) {\r\n  yield* streamingRequest(args, {\r\n    ...options,\r\n    taskHint: \"text-generation\",\r\n    chatCompletion: true\r\n  });\r\n}\r\n\r\n// src/tasks/multimodal/documentQuestionAnswering.ts\r\nasync function documentQuestionAnswering(args, options) {\r\n  const reqArgs = {\r\n    ...args,\r\n    inputs: {\r\n      question: args.inputs.question,\r\n      // convert Blob or ArrayBuffer to base64\r\n      image: base64FromBytes(\r\n        new Uint8Array(\r\n          args.inputs.image instanceof ArrayBuffer ? args.inputs.image : await args.inputs.image.arrayBuffer()\r\n        )\r\n      )\r\n    }\r\n  };\r\n  const res = toArray(\r\n    await request(reqArgs, {\r\n      ...options,\r\n      taskHint: \"document-question-answering\"\r\n    })\r\n  )?.[0];\r\n  const isValidOutput = typeof res?.answer === \"string\" && (typeof res.end === \"number\" || typeof res.end === \"undefined\") && (typeof res.score === \"number\" || typeof res.score === \"undefined\") && (typeof res.start === \"number\" || typeof res.start === \"undefined\");\r\n  if (!isValidOutput) {\r\n    throw new InferenceOutputError(\"Expected Array<{answer: string, end?: number, score?: number, start?: number}>\");\r\n  }\r\n  return res;\r\n}\r\n\r\n// src/tasks/multimodal/visualQuestionAnswering.ts\r\nasync function visualQuestionAnswering(args, options) {\r\n  const reqArgs = {\r\n    ...args,\r\n    inputs: {\r\n      question: args.inputs.question,\r\n      // convert Blob or ArrayBuffer to base64\r\n      image: base64FromBytes(\r\n        new Uint8Array(\r\n          args.inputs.image instanceof ArrayBuffer ? args.inputs.image : await args.inputs.image.arrayBuffer()\r\n        )\r\n      )\r\n    }\r\n  };\r\n  const res = (await request(reqArgs, {\r\n    ...options,\r\n    taskHint: \"visual-question-answering\"\r\n  }))?.[0];\r\n  const isValidOutput = typeof res?.answer === \"string\" && typeof res.score === \"number\";\r\n  if (!isValidOutput) {\r\n    throw new InferenceOutputError(\"Expected Array<{answer: string, score: number}>\");\r\n  }\r\n  return res;\r\n}\r\n\r\n// src/tasks/tabular/tabularRegression.ts\r\nasync function tabularRegression(args, options) {\r\n  const res = await request(args, {\r\n    ...options,\r\n    taskHint: \"tabular-regression\"\r\n  });\r\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x === \"number\");\r\n  if (!isValidOutput) {\r\n    throw new InferenceOutputError(\"Expected number[]\");\r\n  }\r\n  return res;\r\n}\r\n\r\n// src/tasks/tabular/tabularClassification.ts\r\nasync function tabularClassification(args, options) {\r\n  const res = await request(args, {\r\n    ...options,\r\n    taskHint: \"tabular-classification\"\r\n  });\r\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x === \"number\");\r\n  if (!isValidOutput) {\r\n    throw new InferenceOutputError(\"Expected number[]\");\r\n  }\r\n  return res;\r\n}\r\n\r\n// src/HfInference.ts\r\nvar HfInference = class {\r\n  accessToken;\r\n  defaultOptions;\r\n  constructor(accessToken = \"\", defaultOptions = {}) {\r\n    this.accessToken = accessToken;\r\n    this.defaultOptions = defaultOptions;\r\n    for (const [name, fn] of Object.entries(tasks_exports)) {\r\n      Object.defineProperty(this, name, {\r\n        enumerable: false,\r\n        value: (params, options) => (\r\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n          fn({ ...params, accessToken }, { ...defaultOptions, ...options })\r\n        )\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * Returns copy of HfInference tied to a specified endpoint.\r\n   */\r\n  endpoint(endpointUrl) {\r\n    return new HfInferenceEndpoint(endpointUrl, this.accessToken, this.defaultOptions);\r\n  }\r\n};\r\nvar HfInferenceEndpoint = class {\r\n  constructor(endpointUrl, accessToken = \"\", defaultOptions = {}) {\r\n    accessToken;\r\n    defaultOptions;\r\n    for (const [name, fn] of Object.entries(tasks_exports)) {\r\n      Object.defineProperty(this, name, {\r\n        enumerable: false,\r\n        value: (params, options) => (\r\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n          fn({ ...params, accessToken, endpointUrl }, { ...defaultOptions, ...options })\r\n        )\r\n      });\r\n    }\r\n  }\r\n};\r\nexport {\r\n  HfInference,\r\n  HfInferenceEndpoint,\r\n  InferenceOutputError,\r\n  audioClassification,\r\n  audioToAudio,\r\n  automaticSpeechRecognition,\r\n  chatCompletion,\r\n  chatCompletionStream,\r\n  documentQuestionAnswering,\r\n  featureExtraction,\r\n  fillMask,\r\n  imageClassification,\r\n  imageSegmentation,\r\n  imageToImage,\r\n  imageToText,\r\n  objectDetection,\r\n  questionAnswering,\r\n  request,\r\n  sentenceSimilarity,\r\n  streamingRequest,\r\n  summarization,\r\n  tableQuestionAnswering,\r\n  tabularClassification,\r\n  tabularRegression,\r\n  textClassification,\r\n  textGeneration,\r\n  textGenerationStream,\r\n  textToImage,\r\n  textToSpeech,\r\n  tokenClassification,\r\n  translation,\r\n  visualQuestionAnswering,\r\n  zeroShotClassification,\r\n  zeroShotImageClassification\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
